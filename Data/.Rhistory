rm(list=ls())
library(tidyverse)
library(ggplot2)
setwddir = ('~/GitHub/ManyAnalysts/Data/')
setwd('~/GitHub/ManyAnalysts/Data/')
demo <- read_csv("demographics.csv")
getwd()
setwd('~/GitHub/ManyAnalysts/Data/')
demo <- read_csv("demographics.csv")
demo <- read_csv("C:/Users/Alexander/OneDrive - Queen Mary, University of London/Documents/GitHub/ManyAnalysts/Data/demographics.csv")
demo
demo <- read_csv("C:/Users/Alexander/OneDrive - Queen Mary, University of London/Documents/GitHub/ManyAnalysts/Data/demographics.csv")
disp <- read_csv("C:/Users/Alexander/OneDrive - Queen Mary, University of London/Documents/GitHub/ManyAnalysts/Data/displacements.csv")
obs <- read_csv("C:/Users/Alexander/OneDrive - Queen Mary, University of London/Documents/GitHub/ManyAnalysts/Data/observation_times.csv")
groom <- read_csv("C:/Users/Alexander/OneDrive - Queen Mary, University of London/Documents/GitHub/ManyAnalysts/Data/grooming.csv")
library(EloRating)
# check if data fits format requirements
seqcheck(winner = disp$Receiver, loser = disp$Sender, Date = disp$Date)
# calculate elo ratings from sequence of dominance interactions - will be used to create dominance matrix
seq_elo <- elo.seq(winner = disp$Receiver, loser = disp$Sender, Date = disp$Date, runcheck=F)
summary(seq_elo)
# extract elo ratings
elo <- cbind(seq_elo$truedates, as.data.frame(seq_elo$cmat)) %>% # elo ratings with NA's replaced by little steps until next value
rename(Date = 'seq_elo$truedates')
# plot elo ratings
eloplot(seq_elo, ids="all", interpolate="yes", from="start", to="end", color=T)
# calculate median elo rating across study period, leaving out 1 month burn-in period
median_elo <- elo %>%
gather(ID, dom_elo_rating, names(elo)[-1]) %>%
group_by(ID) %>%
summarize(Median_elo = median(as.numeric(dom_elo_rating)))
# create edgelist & graph object
dyads <- crossing(ID1 = demo$ID, ID2 = demo$ID) %>%
filter(ID1 != ID2) %>%
left_join(obs %>% rename(ID1 = Focal, Obs_ID1 = Observation_time)) %>%
left_join(obs %>% rename(ID2 = Focal, Obs_ID2 = Observation_time)) %>%
mutate(Dyad = paste(ID1, ID2, sep = "-"), Total_obs_sec = (Obs_ID1 + Obs_ID2)*3600)
groom_edgelist <- groom %>%
mutate(Dyad = paste(Sender, Receiver, sep = "-")) %>%
group_by(Dyad) %>%
summarize(Gr_total_counts = n(), Gr_total_dur = sum(Duration_seconds)) %>%
left_join(dyads, ., by= "Dyad") %>% # merge edgelist with all possible edges
replace(is.na(.), 0) %>% # to keep dyads who don't interact
mutate(Gr_rate = Gr_total_counts/Total_obs_sec, Gr_prop_time = Gr_total_dur/Total_obs_sec)
library(igraph)
gr_degree_graph <- groom_edgelist %>%
select(ID1, ID2, Gr_rate) %>%
filter(Gr_rate > 0) %>%
graph_from_data_frame(directed = F)
gr_rate_graph <- groom_edgelist %>%
select(ID1, ID2, Gr_rate) %>%
graph_from_data_frame(directed = F)
gr_prop_graph <- groom_edgelist %>%
select(ID1, ID2, Gr_prop_time) %>%
graph_from_data_frame(directed = F)
# calculate degree & strength
gr_metrics <- data.frame(
Degree = degree(gr_degree_graph),
Strenght_rate = strength(gr_rate_graph, weights = E(gr_rate_graph)$Gr_rate),
Strenght_prop = strength(gr_prop_graph, weights = E(gr_prop_graph)$Gr_prop_time)) %>%
rownames_to_column(var = "ID")
testdata <- demo %>%
full_join(median_elo, by = "ID") %>%
full_join(gr_metrics, by = "ID")
# check distribution predictors
table(testdata$Sex)
hist(testdata$Age)
hist(testdata$Median_elo)
hist(testdata$Degree)
hist(testdata$Strenght_rate)
hist(testdata$Strenght_prop)
# z-transform predictors
testdata <- testdata %>%
mutate(Sex = as.factor(Sex),
Z_age = scale(Age),
Z_rank = scale(Median_elo))
library(lme4)
library(lme4)
library(car)
### DEGREE ###
degree_model=lm(Degree ~ Sex + Z_age + Z_rank,
data=testdata)
diagnostics.plot(degree_model) # residuals look good
round(cbind(coef(degree_model), coef(degree_model)+t(apply(X=dfbeta(degree_model), MARGIN=2, FUN=range))), 3)
# check for collinearity (in general linear models: need to square the last column in the vif output: GVIF^(1/(2*Df)), generalized vifs)
vif(degree_model) # high for rank & sex!
# visual exploration
plot(testdata$Age, testdata$Degree) # no obvious effect of age
plot(testdata$Median_elo, testdata$Degree) # within sexes, higher ranking individuals tend to have lower degree
# clear effect of sex on rank:
points(testdata$Median_elo[testdata$Sex == "f"], testdata$Degree[testdata$Sex == "f"], col = "green")
points(testdata$Median_elo[testdata$Sex == "m"], testdata$Degree[testdata$Sex == "m"], col = "blue")
plot.new()
# clear effect of sex on rank:
points(testdata$Median_elo[testdata$Sex == "f"], testdata$Degree[testdata$Sex == "f"], col = "green")
points(testdata$Median_elo[testdata$Sex == "m"], testdata$Degree[testdata$Sex == "m"], col = "blue")
plot(testdata$Sex, testdata$Degree) # females seem to have higher degree than males
# but rank counters effect of sex - because females tend to be higher ranking:
points(testdata$Sex[testdata$Median_elo <1000], testdata$Degree[testdata$Median_elo <1000], col = "orange")
points(testdata$Sex[testdata$Median_elo >1000], testdata$Degree[testdata$Median_elo >1000], col = "red")
plot.new()
# visual exploration
plot(testdata$Age, testdata$Degree) # no obvious effect of age
plot(testdata$Median_elo, testdata$Degree) # within sexes, higher ranking individuals tend to have lower degree
# clear effect of sex on rank:
points(testdata$Median_elo[testdata$Sex == "f"], testdata$Degree[testdata$Sex == "f"], col = "green")
points(testdata$Median_elo[testdata$Sex == "m"], testdata$Degree[testdata$Sex == "m"], col = "blue")
plot(testdata$Sex, testdata$Degree) # females seem to have higher degree than males
# but rank counters effect of sex - because females tend to be higher ranking:
points(testdata$Sex[testdata$Median_elo <1000], testdata$Degree[testdata$Median_elo <1000], col = "orange")
points(testdata$Sex[testdata$Median_elo >1000], testdata$Degree[testdata$Median_elo >1000], col = "red")
summary(degree_model)
# checking how effects differ from models with each predictor separately
summary(lm(Degree ~ Sex, data=testdata))
summary(lm(Degree ~ Z_age, data=testdata))
summary(lm(Degree ~ Z_rank, data=testdata)) # when running model with just rank, the confound of sex masks the rank effect
# extract coefficients & CI
coef_degree = coefficients(degree_model)
CI_degree = as.data.frame(cbind(coef_degree, confint(object=degree_model)))
CI_degree
### RATE ###
rate_model=lm(Strenght_rate ~ Sex + Z_age + Z_rank,
data=testdata)
diagnostics.plot(rate_model) # residuals look good
summary(rate_model) # similar estimated effect on rate of grooming as number of grooming partners
testdata$Strenght_rate %>% hist
### PROPORTION TIME ###
prop_model=lm(Strenght_prop ~ Sex + Z_age + Z_rank,
data=testdata)
summary(prop_model) # similar estimated effect on proportion of time grooming as number of grooming partners
summary(rate_model) # similar estimated effect on rate of grooming as number of grooming partners
# run model on non-scaled data for plotting
plot_model=lm(Degree ~ Sex + Age + Median_elo,
data=testdata)
# extract sex effect for average rank and age
sex_predict = ggemmeans(plot_model, terms = c("Sex")) %>% as.data.frame()
library(ggeffects)
# extract sex effect for average rank and age
sex_predict = ggemmeans(plot_model, terms = c("Sex")) %>% as.data.frame()
# extract sex effect for average rank and age
sex_predict = ggemmeans(plot_model, terms = c("Sex")) %>% as.data.frame()
ggplot(testdata) +
geom_jitter(aes(Sex, Degree, color = Median_elo)) +
geom_errorbar(aes(x, y = predicted, ymin = conf.low, ymax = conf.high), data = sex_predict, width = 0.2) +
scale_color_viridis_c() +
labs(x = "Sex", y = "Number of grooming partners") +
theme(panel.background = element_blank(), axis.line = element_line(color="black"))
# extract age effect for average rank and sex (there is no real 'average sex' but this is dummy coded & centered sex)
age_predict = ggemmeans(plot_model, terms = c("Age")) %>% as.data.frame()
ggplot(testdata) +
geom_jitter(aes(Age, Degree)) +
geom_line(aes(x, y = predicted), data = age_predict) +
geom_ribbon(aes(x, ymin = conf.low, ymax = conf.high), data = age_predict, alpha = 0.3) +
labs(x = "Age", y = "Number of grooming partners") +
theme(panel.background = element_blank(), axis.line = element_line(color="black"))
# extract rank effect for average age and sex (there is no real 'average sex' but this is dummy coded & centered sex)
rank_predict = ggemmeans(plot_model, terms = c("Median_elo")) %>% as.data.frame()
ggplot(testdata) +
geom_jitter(aes(Median_elo, Degree, color = Sex)) +
geom_line(aes(x, y = predicted), data = rank_predict) +
geom_ribbon(aes(x, ymin = conf.low, ymax = conf.high), data = rank_predict, alpha = 0.3) +
labs(x = "Rank", y = "Number of grooming partners") +
scale_color_brewer(palette = "Set2") +
theme(panel.background = element_blank(), axis.line = element_line(color="black"))
median_elo
# calculate median elo rating across study period, leaving out 1 month burn-in period
median_elo <- elo %>%
gather(ID, dom_elo_rating, names(elo)[-1]) %>%
group_by(ID) %>%
summarize(Median_elo = median(as.numeric(dom_elo_rating)))
median_elo
median_elo %>% arrange(desc(Median_elo))
median_elo %>% arrange(desc(Median_elo)) %>% data.frame()
ggplot(testdata) +
geom_jitter(aes(Median_elo, Degree, color = Sex)) +
geom_line(aes(x, y = predicted), data = rank_predict) +
geom_ribbon(aes(x, ymin = conf.low, ymax = conf.high), data = rank_predict, alpha = 0.3) +
labs(x = "Rank", y = "Number of grooming partners") +
scale_color_brewer(palette = "Set2") +
theme(panel.background = element_blank(), axis.line = element_line(color="black"))
demo %>% nrow
testdata
testdata$Degree %>% rnage
testdata$Degree %>% range
gr_metrics
